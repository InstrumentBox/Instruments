{"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"text":"Codable","kind":"typeIdentifier","preciseIdentifier":"s:s7Codablea"},{"kind":"text","text":", "},{"preciseIdentifier":"s:SQ","text":"Equatable","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:SY","text":"RawRepresentable"},{"text":", names: named(==), named(init(from:)), named(encode(to:)), named(RawValue), named(init(rawValue:))) ","kind":"text"},{"text":"@attached","kind":"attribute"},{"kind":"text","text":"(member, names: named(rawValue), named(init(_:))) "},{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Enum"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"RawValue"},{"text":">() ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"RawValue"},{"text":" : ","kind":"text"},{"text":"Decodable","preciseIdentifier":"s:Se","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"RawValue","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Encodable","kind":"typeIdentifier","preciseIdentifier":"s:SE"},{"text":", ","kind":"text"},{"text":"RawValue","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Equatable","kind":"typeIdentifier","preciseIdentifier":"s:SQ"}],"platforms":["iOS"],"languages":["swift"]}]},{"content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This enum is intended to be used when you don’t know what cases you may receive from server and"},{"text":" ","type":"text"},{"type":"text","text":"you don’t want your parser to return error, or if you need to know only about some specific"},{"text":" ","type":"text"},{"type":"text","text":"cases."}]},{"inlineContent":[{"text":"Let’s say you have following API error structure:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["{","   \"domain_code\": Int","}"],"syntax":"json"},{"type":"paragraph","inlineContent":[{"type":"text","text":"so you can declare enum:"}]},{"code":["@Enum<Int>","struct ErrorDomainCode {","   static let someSpecificCodeYouNeed = ErrorDomainCode(-42)","   static let anotherSpecificCodeYouNeed = ErrorDomainCode(-43)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"and error structure:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct MyAPIError: Error, Codable {","   let domainCode: ErrorDomainCode","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"and later somewhere in code:"}]},{"type":"codeListing","syntax":"swift","code":["if error.domainCode == .someSpecificCodeYouNeed {","   react(to: error)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now in cases when backend developers add new domain codes your parser won’t return with error"},{"text":" ","type":"text"},{"text":"and you can process error without magic numbers.","type":"text"}]}],"kind":"content"}],"abstract":[{"type":"text","text":"Defines a struct with a given raw value that is intended to be used as an enum with unknown"},{"type":"text","text":" "},{"type":"text","text":"number of cases. Generates conformances to Codable, Equatable, and RawRepresentable protocols."},{"type":"text","text":" "},{"text":"Requieres ","type":"text"},{"code":"RawValue","type":"codeVoice"},{"type":"text","text":" to conform to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}],"hierarchy":{"paths":[["doc:\/\/Instruments\/documentation\/Instruments"]]},"variants":[{"paths":["\/documentation\/instruments\/enum()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Instruments\/documentation\/Instruments\/Enum()"},"metadata":{"roleHeading":"Macro","title":"Enum()","symbolKind":"macro","role":"symbol","modules":[{"name":"Instruments"}],"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Enum"},{"text":"<","kind":"text"},{"text":"RawValue","kind":"genericParameter"},{"kind":"text","text":">()"}],"externalID":"s:11Instruments4EnumyycSeRzSERzSQRzlufm"},"sections":[],"kind":"symbol","seeAlsoSections":[{"title":"List of Tools","identifiers":["doc:\/\/Instruments\/documentation\/Instruments\/BytesConstructibleNumber","doc:\/\/Instruments\/documentation\/Instruments\/Endianness","doc:\/\/Instruments\/documentation\/Instruments\/DebounceFunction","doc:\/\/Instruments\/documentation\/Instruments\/DebounceFunctionConfiguration","doc:\/\/Instruments\/documentation\/Instruments\/HexStringDataDecoder","doc:\/\/Instruments\/documentation\/Instruments\/HexStringDataDecoderError","doc:\/\/Instruments\/documentation\/Instruments\/LLDB","doc:\/\/Instruments\/documentation\/Instruments\/WeakShared","doc:\/\/Instruments\/documentation\/Instruments\/Pointer","doc:\/\/Instruments\/documentation\/Instruments\/SecureRandom","doc:\/\/Instruments\/documentation\/Instruments\/SecureRandomError","doc:\/\/Instruments\/documentation\/Instruments\/Timer","doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader","doc:\/\/Instruments\/documentation\/Instruments\/LinewiseReader","doc:\/\/Instruments\/documentation\/Instruments\/Foundation","doc:\/\/Instruments\/documentation\/Instruments\/Swift","doc:\/\/Instruments\/documentation\/Instruments\/_Concurrency"],"generated":true}],"references":{"doc://Instruments/documentation/Instruments/HexStringDataDecoder":{"kind":"symbol","abstract":[{"type":"text","text":"A decoder that takes a hexadecimal string as input and returns an instance of "},{"code":"Data","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"HexStringDataDecoder","kind":"identifier"}],"type":"topic","url":"\/documentation\/instruments\/hexstringdatadecoder","navigatorTitle":[{"text":"HexStringDataDecoder","kind":"identifier"}],"title":"HexStringDataDecoder","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/HexStringDataDecoder"},"doc://Instruments/documentation/Instruments/DebounceFunctionConfiguration":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DebounceFunctionConfiguration"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DebounceFunctionConfiguration"}],"abstract":[{"type":"text","text":"A global configuration of "},{"type":"codeVoice","code":"DebounceFunction"},{"type":"text","text":"."}],"title":"DebounceFunctionConfiguration","url":"\/documentation\/instruments\/debouncefunctionconfiguration","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/DebounceFunctionConfiguration"},"doc://Instruments/documentation/Instruments/Enum()":{"type":"topic","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Enum"},{"kind":"text","text":"<"},{"text":"RawValue","kind":"genericParameter"},{"text":">()","kind":"text"}],"abstract":[{"type":"text","text":"Defines a struct with a given raw value that is intended to be used as an enum with unknown"},{"type":"text","text":" "},{"type":"text","text":"number of cases. Generates conformances to Codable, Equatable, and RawRepresentable protocols."},{"type":"text","text":" "},{"type":"text","text":"Requieres "},{"code":"RawValue","type":"codeVoice"},{"type":"text","text":" to conform to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":"."}],"title":"Enum()","url":"\/documentation\/instruments\/enum()","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Enum()"},"doc://Instruments/documentation/Instruments/Pointer":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Pointer"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Pointer"}],"abstract":[{"type":"codeVoice","code":"Pointer"},{"type":"text","text":" is a property wrapper that allows you to work with classes and struct as they would be"},{"type":"text","text":" "},{"type":"text","text":"pointed in the Objective-C."}],"title":"Pointer","url":"\/documentation\/instruments\/pointer","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Pointer"},"doc://Instruments/documentation/Instruments/Foundation":{"type":"topic","role":"collection","abstract":[],"title":"Foundation","url":"\/documentation\/instruments\/foundation","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Foundation"},"doc://Instruments/documentation/Instruments/WeakShared":{"kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/WeakShared","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WeakShared","kind":"identifier"}],"role":"symbol","abstract":[{"type":"codeVoice","code":"WeakShared"},{"type":"text","text":" is a property wrapper for references types that allow you to share the same"},{"type":"text","text":" "},{"text":"instance while reference exists. If there’s no reference, the new object is created.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"WeakShared"}],"url":"\/documentation\/instruments\/weakshared","type":"topic","title":"WeakShared"},"doc://Instruments/documentation/Instruments/_Concurrency":{"type":"topic","role":"collection","abstract":[],"title":"_Concurrency","url":"\/documentation\/instruments\/_concurrency","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/_Concurrency"},"doc://Instruments/documentation/Instruments/DebounceFunction":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DebounceFunction"}],"abstract":[{"type":"text","text":"A function that allows you to debounce some work. It invokes action after a certain amount time"},{"type":"text","text":" "},{"type":"text","text":"if there’s no new calls during this time. Can be called dynamically due to "},{"type":"codeVoice","code":"@dynamicCallable"},{"type":"text","text":"."}],"kind":"symbol","type":"topic","title":"DebounceFunction","role":"symbol","navigatorTitle":[{"text":"DebounceFunction","kind":"identifier"}],"url":"\/documentation\/instruments\/debouncefunction","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/DebounceFunction"},"doc://Instruments/documentation/Instruments/LinewiseReader":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LinewiseReader"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"LinewiseReader"}],"abstract":[],"title":"LinewiseReader","deprecated":true,"url":"\/documentation\/instruments\/linewisereader","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LinewiseReader"},"doc://Instruments/documentation/Instruments":{"identifier":"doc:\/\/Instruments\/documentation\/Instruments","url":"\/documentation\/instruments","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Instruments"}]},{"type":"text","text":" is a package that provides you with set of tools that may be handy for Swift"},{"text":" ","type":"text"},{"type":"text","text":"development."}],"type":"topic","kind":"symbol","title":"Instruments","role":"collection"},"doc://Instruments/documentation/Instruments/Timer":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Timer","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Timer"}],"abstract":[{"type":"text","text":"A timer that fires after a certain time interval has elapsed, invoking a specified action. Built"},{"type":"text","text":" "},{"type":"text","text":"on top of "},{"type":"codeVoice","code":"DispatchSourceTimer"},{"type":"text","text":"."}],"title":"Timer","url":"\/documentation\/instruments\/timer","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Timer"},"doc://Instruments/documentation/Instruments/SecureRandomError":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SecureRandomError"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SecureRandomError"}],"abstract":[{"type":"text","text":"An error that can be thrown by "},{"type":"codeVoice","code":"SecureRandom"},{"type":"text","text":" if something goes wrong."}],"title":"SecureRandomError","url":"\/documentation\/instruments\/securerandomerror","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/SecureRandomError"},"doc://Instruments/documentation/Instruments/BytesConstructibleNumber":{"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/BytesConstructibleNumber","url":"\/documentation\/instruments\/bytesconstructiblenumber","abstract":[{"type":"text","text":"A protocol to which number should conform to be initialized from array of bytes and some"},{"type":"text","text":" "},{"type":"text","text":"endianness. The "},{"code":"Instruments","type":"codeVoice"},{"type":"text","text":" library makes all integer types to conform this protocol."}],"type":"topic","kind":"symbol","title":"BytesConstructibleNumber","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"BytesConstructibleNumber","kind":"identifier"}],"navigatorTitle":[{"text":"BytesConstructibleNumber","kind":"identifier"}]},"doc://Instruments/documentation/Instruments/Swift":{"type":"topic","role":"collection","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Swift","abstract":[],"kind":"symbol","url":"\/documentation\/instruments\/swift","title":"Swift"},"doc://Instruments/documentation/Instruments/HexStringDataDecoderError":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HexStringDataDecoderError"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HexStringDataDecoderError"}],"abstract":[{"type":"text","text":"An error that is thrown when "},{"type":"codeVoice","code":"HexStringDataDecoder"},{"type":"text","text":" fails."}],"title":"HexStringDataDecoderError","url":"\/documentation\/instruments\/hexstringdatadecodererror","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/HexStringDataDecoderError"},"doc://Instruments/documentation/Instruments/LineByLineReader":{"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A reader that reads file line by line by using given delimiter."}],"navigatorTitle":[{"kind":"identifier","text":"LineByLineReader"}],"type":"topic","url":"\/documentation\/instruments\/linebylinereader","title":"LineByLineReader","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LineByLineReader"}]},"doc://Instruments/documentation/Instruments/SecureRandom":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"SecureRandom","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SecureRandom"}],"abstract":[{"type":"text","text":"An object that provides you functionality to generate bytes or numbers in a secure way."}],"title":"SecureRandom","url":"\/documentation\/instruments\/securerandom","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/SecureRandom"},"doc://Instruments/documentation/Instruments/LLDB":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"LLDB","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LLDB"}],"abstract":[{"text":"Scope for functions to work with debugger.","type":"text"}],"title":"LLDB","url":"\/documentation\/instruments\/lldb","kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LLDB"},"doc://Instruments/documentation/Instruments/Endianness":{"abstract":[{"text":"An order of bytes which can be either ","type":"text"},{"code":"BE","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"LE"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Endianness","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"Endianness","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","title":"Endianness","url":"\/documentation\/instruments\/endianness","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Endianness"}}}