{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/instruments\/linebylinereader"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"LineByLineReader","kind":"identifier"}],"languages":["swift"],"platforms":["iOS"]}]}],"metadata":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"LineByLineReader","kind":"identifier"}],"roleHeading":"Class","title":"LineByLineReader","role":"symbol","modules":[{"name":"Instruments"}],"symbolKind":"class","externalID":"s:11Instruments06LineByB6ReaderC","navigatorTitle":[{"text":"LineByLineReader","kind":"identifier"}]},"topicSections":[{"identifiers":["doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/init(fileURL:)"],"title":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/chunkSize","doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/encoding","doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/lineDelimiter"]},{"title":"Instance Methods","identifiers":["doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/readLine()-1dskr","doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/readLine()-7eg52"]}],"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"A reader that reads file line by line by using given delimiter."}],"hierarchy":{"paths":[["doc:\/\/Instruments\/documentation\/Instruments"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/Instruments\/documentation\/Instruments\/BytesConstructibleNumber","doc:\/\/Instruments\/documentation\/Instruments\/Endianness","doc:\/\/Instruments\/documentation\/Instruments\/DebounceFunction","doc:\/\/Instruments\/documentation\/Instruments\/DebounceFunctionConfiguration","doc:\/\/Instruments\/documentation\/Instruments\/HexStringDataDecoder","doc:\/\/Instruments\/documentation\/Instruments\/HexStringDataDecoderError","doc:\/\/Instruments\/documentation\/Instruments\/LLDB","doc:\/\/Instruments\/documentation\/Instruments\/WeakShared","doc:\/\/Instruments\/documentation\/Instruments\/Pointer","doc:\/\/Instruments\/documentation\/Instruments\/SecureRandom","doc:\/\/Instruments\/documentation\/Instruments\/SecureRandomError","doc:\/\/Instruments\/documentation\/Instruments\/Timer","doc:\/\/Instruments\/documentation\/Instruments\/LinewiseReader","doc:\/\/Instruments\/documentation\/Instruments\/Enum()","doc:\/\/Instruments\/documentation\/Instruments\/Foundation","doc:\/\/Instruments\/documentation\/Instruments\/Swift","doc:\/\/Instruments\/documentation\/Instruments\/_Concurrency"],"title":"List of Tools","generated":true}],"references":{"doc://Instruments/documentation/Instruments/LineByLineReader/lineDelimiter":{"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"lineDelimiter"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"}],"title":"lineDelimiter","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/lineDelimiter","kind":"symbol","abstract":[{"type":"text","text":"A delimiter to use to break lines. Defaults to "},{"code":"\\n","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/instruments\/linebylinereader\/linedelimiter","type":"topic"},"doc://Instruments/documentation/Instruments/LineByLineReader/readLine()-1dskr":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"readLine","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:10Foundation4DataV","text":"Data","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol","type":"topic","kind":"symbol","title":"readLine()","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/readLine()-1dskr","abstract":[{"text":"Reads and returns next line from file.","type":"text"}],"url":"\/documentation\/instruments\/linebylinereader\/readline()-1dskr"},"doc://Instruments/documentation/Instruments/HexStringDataDecoder":{"kind":"symbol","role":"symbol","type":"topic","title":"HexStringDataDecoder","abstract":[{"text":"A decoder that takes a hexadecimal string as input and returns an instance of ","type":"text"},{"type":"codeVoice","code":"Data"},{"type":"text","text":"."}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/HexStringDataDecoder","url":"\/documentation\/instruments\/hexstringdatadecoder","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"HexStringDataDecoder","kind":"identifier"}],"navigatorTitle":[{"text":"HexStringDataDecoder","kind":"identifier"}]},"doc://Instruments/documentation/Instruments/BytesConstructibleNumber":{"abstract":[{"type":"text","text":"A protocol to which number should conform to be initialized from array of bytes and some"},{"type":"text","text":" "},{"text":"endianness. The ","type":"text"},{"code":"Instruments","type":"codeVoice"},{"type":"text","text":" library makes all integer types to conform this protocol."}],"title":"BytesConstructibleNumber","url":"\/documentation\/instruments\/bytesconstructiblenumber","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BytesConstructibleNumber"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/BytesConstructibleNumber","navigatorTitle":[{"kind":"identifier","text":"BytesConstructibleNumber"}],"type":"topic"},"doc://Instruments/documentation/Instruments/Enum()":{"url":"\/documentation\/instruments\/enum()","abstract":[{"type":"text","text":"Defines a struct with a given raw value that is intended to be used as an enum with unknown"},{"type":"text","text":" "},{"type":"text","text":"number of cases. Generates conformances to Codable, Equatable, and RawRepresentable protocols."},{"type":"text","text":" "},{"type":"text","text":"Requieres "},{"type":"codeVoice","code":"RawValue"},{"type":"text","text":" to conform to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":".","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Enum","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"RawValue"},{"kind":"text","text":">()"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Enum()","kind":"symbol","type":"topic","title":"Enum()","role":"symbol"},"doc://Instruments/documentation/Instruments/LineByLineReader/readLine()-7eg52":{"url":"\/documentation\/instruments\/linebylinereader\/readline()-7eg52","abstract":[{"type":"text","text":"Reads and returns next line from file by converting it to string."}],"type":"topic","title":"readLine()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readLine"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?"}],"role":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/readLine()-7eg52","kind":"symbol"},"doc://Instruments/documentation/Instruments/Swift":{"abstract":[],"type":"topic","title":"Swift","url":"\/documentation\/instruments\/swift","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Swift","kind":"symbol","role":"collection"},"doc://Instruments/documentation/Instruments/Timer":{"kind":"symbol","title":"Timer","navigatorTitle":[{"kind":"identifier","text":"Timer"}],"abstract":[{"type":"text","text":"A timer that fires after a certain time interval has elapsed, invoking a specified action. Built"},{"type":"text","text":" "},{"text":"on top of ","type":"text"},{"code":"DispatchSourceTimer","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Timer","kind":"identifier"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Timer","url":"\/documentation\/instruments\/timer"},"doc://Instruments/documentation/Instruments/LineByLineReader/chunkSize":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"chunkSize","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/chunkSize","role":"symbol","url":"\/documentation\/instruments\/linebylinereader\/chunksize","title":"chunkSize","kind":"symbol","type":"topic","abstract":[{"text":"A number of bytes to read from file at once. Defaults to 10.","type":"text"}]},"doc://Instruments/documentation/Instruments/SecureRandomError":{"type":"topic","title":"SecureRandomError","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SecureRandomError","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/instruments\/securerandomerror","navigatorTitle":[{"text":"SecureRandomError","kind":"identifier"}],"abstract":[{"text":"An error that can be thrown by ","type":"text"},{"type":"codeVoice","code":"SecureRandom"},{"type":"text","text":" if something goes wrong."}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/SecureRandomError"},"doc://Instruments/documentation/Instruments/LineByLineReader/init(fileURL:)":{"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/init(fileURL:)","type":"topic","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"text":"fileURL","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"URL","preciseIdentifier":"s:10Foundation3URLV"},{"kind":"text","text":")"}],"abstract":[{"text":"Creates and returns new instance of LineByLineReader with given parameters.","type":"text"}],"url":"\/documentation\/instruments\/linebylinereader\/init(fileurl:)","role":"symbol","title":"init(fileURL:)"},"doc://Instruments/documentation/Instruments/DebounceFunctionConfiguration":{"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DebounceFunctionConfiguration"}],"navigatorTitle":[{"kind":"identifier","text":"DebounceFunctionConfiguration"}],"url":"\/documentation\/instruments\/debouncefunctionconfiguration","role":"symbol","title":"DebounceFunctionConfiguration","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/DebounceFunctionConfiguration","type":"topic","abstract":[{"type":"text","text":"A global configuration of "},{"code":"DebounceFunction","type":"codeVoice"},{"text":".","type":"text"}]},"doc://Instruments/documentation/Instruments/LinewiseReader":{"kind":"symbol","role":"symbol","deprecated":true,"type":"topic","title":"LinewiseReader","abstract":[],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LinewiseReader","url":"\/documentation\/instruments\/linewisereader","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LinewiseReader","kind":"identifier"}],"navigatorTitle":[{"text":"LinewiseReader","kind":"identifier"}]},"doc://Instruments/documentation/Instruments/LLDB":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LLDB"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LLDB","url":"\/documentation\/instruments\/lldb","abstract":[{"type":"text","text":"Scope for functions to work with debugger."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LLDB"}],"title":"LLDB","kind":"symbol"},"doc://Instruments/documentation/Instruments/DebounceFunction":{"kind":"symbol","role":"symbol","type":"topic","title":"DebounceFunction","abstract":[{"text":"A function that allows you to debounce some work. It invokes action after a certain amount time","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if there’s no new calls during this time. Can be called dynamically due to "},{"code":"@dynamicCallable","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/DebounceFunction","url":"\/documentation\/instruments\/debouncefunction","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DebounceFunction"}],"navigatorTitle":[{"kind":"identifier","text":"DebounceFunction"}]},"doc://Instruments/documentation/Instruments/WeakShared":{"type":"topic","title":"WeakShared","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"WeakShared","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/instruments\/weakshared","navigatorTitle":[{"kind":"identifier","text":"WeakShared"}],"abstract":[{"code":"WeakShared","type":"codeVoice"},{"type":"text","text":" is a property wrapper for references types that allow you to share the same"},{"type":"text","text":" "},{"text":"instance while reference exists. If there’s no reference, the new object is created.","type":"text"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/WeakShared"},"doc://Instruments/documentation/Instruments/LineByLineReader":{"kind":"symbol","title":"LineByLineReader","url":"\/documentation\/instruments\/linebylinereader","abstract":[{"text":"A reader that reads file line by line by using given delimiter.","type":"text"}],"role":"symbol","type":"topic","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LineByLineReader"}],"navigatorTitle":[{"text":"LineByLineReader","kind":"identifier"}]},"doc://Instruments/documentation/Instruments":{"title":"Instruments","url":"\/documentation\/instruments","abstract":[{"inlineContent":[{"text":"Instruments","type":"text"}],"type":"emphasis"},{"text":" is a package that provides you with set of tools that may be handy for Swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"development."}],"kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments","role":"collection","type":"topic"},"doc://Instruments/documentation/Instruments/Foundation":{"type":"topic","title":"Foundation","kind":"symbol","role":"collection","url":"\/documentation\/instruments\/foundation","abstract":[],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Foundation"},"doc://Instruments/documentation/Instruments/_Concurrency":{"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/_Concurrency","role":"collection","kind":"symbol","url":"\/documentation\/instruments\/_concurrency","title":"_Concurrency","type":"topic","abstract":[]},"doc://Instruments/documentation/Instruments/LineByLineReader/encoding":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"encoding","kind":"identifier"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Encoding","kind":"typeIdentifier","preciseIdentifier":"s:SS10FoundationE8EncodingV"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/LineByLineReader\/encoding","role":"symbol","url":"\/documentation\/instruments\/linebylinereader\/encoding","title":"encoding","kind":"symbol","type":"topic","abstract":[{"text":"Encoding of content of file. Defaults to ","type":"text"},{"code":".utf8","type":"codeVoice"},{"text":".","type":"text"}]},"doc://Instruments/documentation/Instruments/Pointer":{"type":"topic","title":"Pointer","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Pointer","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/instruments\/pointer","navigatorTitle":[{"kind":"identifier","text":"Pointer"}],"abstract":[{"code":"Pointer","type":"codeVoice"},{"type":"text","text":" is a property wrapper that allows you to work with classes and struct as they would be"},{"type":"text","text":" "},{"text":"pointed in the Objective-C.","type":"text"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Pointer"},"doc://Instruments/documentation/Instruments/Endianness":{"navigatorTitle":[{"text":"Endianness","kind":"identifier"}],"role":"symbol","url":"\/documentation\/instruments\/endianness","title":"Endianness","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Endianness"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/Endianness","abstract":[{"text":"An order of bytes which can be either ","type":"text"},{"code":"BE","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"LE","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","kind":"symbol"},"doc://Instruments/documentation/Instruments/SecureRandom":{"kind":"symbol","role":"symbol","type":"topic","title":"SecureRandom","abstract":[{"text":"An object that provides you functionality to generate bytes or numbers in a secure way.","type":"text"}],"identifier":"doc:\/\/Instruments\/documentation\/Instruments\/SecureRandom","url":"\/documentation\/instruments\/securerandom","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SecureRandom","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SecureRandom"}]},"doc://Instruments/documentation/Instruments/HexStringDataDecoderError":{"title":"HexStringDataDecoderError","navigatorTitle":[{"text":"HexStringDataDecoderError","kind":"identifier"}],"url":"\/documentation\/instruments\/hexstringdatadecodererror","abstract":[{"type":"text","text":"An error that is thrown when "},{"type":"codeVoice","code":"HexStringDataDecoder"},{"text":" fails.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Instruments\/documentation\/Instruments\/HexStringDataDecoderError","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HexStringDataDecoderError"}],"type":"topic"}}}