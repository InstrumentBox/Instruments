{"interfaceLanguages":{"swift":[{"children":[{"title":"Installation","type":"groupMarker"},{"path":"\/documentation\/instruments\/installation","title":"Installation","type":"article"},{"title":"List of Tools","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/bytesconstructiblenumber\/init(bigendian:)","title":"init(bigEndian: Self)","type":"init"},{"path":"\/documentation\/instruments\/bytesconstructiblenumber\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/instruments\/bytesconstructiblenumber\/init(data:endianness:)-5hyh","title":"init(data: Data, endianness: Endianness)","type":"init"}],"title":"BytesConstructibleNumber Implementations","type":"groupMarker"}],"path":"\/documentation\/instruments\/bytesconstructiblenumber\/init(data:endianness:)-8ub7m","title":"init(data: Data, endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/bytesconstructiblenumber\/init(littleendian:)","title":"init(littleEndian: Self)","type":"init"}],"path":"\/documentation\/instruments\/bytesconstructiblenumber","title":"BytesConstructibleNumber","type":"protocol"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/instruments\/endianness\/big","title":"case big","type":"case"},{"path":"\/documentation\/instruments\/endianness\/little","title":"case little","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/instruments\/endianness\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/instruments\/endianness\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/endianness","title":"Endianness","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/debouncefunction\/init(debounceinterval:action:)","title":"init(debounceInterval: TimeInterval, action: (Argument) -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/debouncefunction\/call()","title":"func call()","type":"method"},{"path":"\/documentation\/instruments\/debouncefunction\/call(with:)","title":"func call(with: Argument)","type":"method"},{"path":"\/documentation\/instruments\/debouncefunction\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/instruments\/debouncefunction\/dynamicallycall(witharguments:)","title":"func dynamicallyCall(withArguments: [Argument])","type":"method"},{"path":"\/documentation\/instruments\/debouncefunction\/fire()","title":"func fire()","type":"method"},{"path":"\/documentation\/instruments\/debouncefunction\/fire(with:)","title":"func fire(with: Argument)","type":"method"}],"path":"\/documentation\/instruments\/debouncefunction","title":"DebounceFunction","type":"class"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/instruments\/debouncefunctionconfiguration\/debounceinterval","title":"static var debounceInterval: TimeInterval","type":"property"}],"path":"\/documentation\/instruments\/debouncefunctionconfiguration","title":"DebounceFunctionConfiguration","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/hexstringdatadecoder\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/hexstringdatadecoder\/decode(_:)","title":"func decode(String) throws -> Data","type":"method"}],"path":"\/documentation\/instruments\/hexstringdatadecoder","title":"HexStringDataDecoder","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/instruments\/hexstringdatadecodererror\/==(_:_:)","title":"static func == (HexStringDataDecoderError, HexStringDataDecoderError) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/instruments\/hexstringdatadecodererror\/unexpectedbyte(_:location:)","title":"case unexpectedByte(String, location: Int)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/instruments\/hexstringdatadecodererror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/instruments\/hexstringdatadecodererror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/instruments\/hexstringdatadecodererror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/instruments\/hexstringdatadecodererror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/hexstringdatadecodererror","title":"HexStringDataDecoderError","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/lldb\/isattached()","title":"static func isAttached() -> Bool","type":"method"},{"path":"\/documentation\/instruments\/lldb\/preventfromattaching()","title":"static func preventFromAttaching()","type":"method"}],"path":"\/documentation\/instruments\/lldb","title":"LLDB","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/weakshared\/init(instance:)","title":"init(instance: () -> Instance)","type":"init"},{"path":"\/documentation\/instruments\/weakshared\/init(instancefactory:)","title":"init(instanceFactory: () -> Instance)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/instruments\/weakshared\/wrappedvalue","title":"var wrappedValue: Instance","type":"property"}],"path":"\/documentation\/instruments\/weakshared","title":"WeakShared","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/securerandom\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/securerandom\/nextbytes(count:)","title":"func nextBytes(count: Int) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/instruments\/securerandom\/nextdata(count:)","title":"func nextData(count: Int) throws -> Data","type":"method"},{"path":"\/documentation\/instruments\/securerandom\/nextint()","title":"func nextInt() throws -> Int","type":"method"}],"path":"\/documentation\/instruments\/securerandom","title":"SecureRandom","type":"class"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/instruments\/securerandomerror\/cannotgenerate","title":"case cannotGenerate","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/instruments\/securerandomerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/instruments\/securerandomerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/instruments\/securerandomerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/instruments\/securerandomerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/securerandomerror","title":"SecureRandomError","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/timer\/init(interval:repeats:queue:action:)","title":"init(interval: TimeInterval, repeats: Bool, queue: DispatchQueue?, action: () -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/timer\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/instruments\/timer\/resume()","title":"func resume()","type":"method"},{"path":"\/documentation\/instruments\/timer\/suspend()","title":"func suspend()","type":"method"}],"path":"\/documentation\/instruments\/timer","title":"Timer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/linebylinereader\/init(fileurl:)","title":"init?(fileURL: URL)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/instruments\/linebylinereader\/chunksize","title":"var chunkSize: Int","type":"property"},{"path":"\/documentation\/instruments\/linebylinereader\/encoding","title":"var encoding: String.Encoding","type":"property"},{"path":"\/documentation\/instruments\/linebylinereader\/linedelimiter","title":"var lineDelimiter: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/linebylinereader\/readline()-1dskr","title":"func readLine() -> Data?","type":"method"},{"path":"\/documentation\/instruments\/linebylinereader\/readline()-7eg52","title":"func readLine() -> String?","type":"method"}],"path":"\/documentation\/instruments\/linebylinereader","title":"LineByLineReader","type":"class"},{"path":"\/documentation\/instruments\/linewisereader","title":"LinewiseReader","type":"typealias"},{"path":"\/documentation\/instruments\/enum()","title":"macro Enum<RawValue>()","type":"macro"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/dateformatter\/iso8601","title":"static var iso8601: DateFormatter","type":"property"}],"path":"\/documentation\/instruments\/foundation\/dateformatter","title":"DateFormatter","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/rawvalue","title":"var rawValue: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/uppercased","title":"static let uppercased: Data.HexStringOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/foundation\/data\/hexstringoptions","title":"Data.HexStringOptions","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/data\/hexstring(options:)","title":"func hexString(options: HexStringOptions) -> String","type":"method"}],"path":"\/documentation\/instruments\/foundation\/data","title":"Data","type":"extension"},{"title":"Extended Types","type":"groupMarker"},{"children":[{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/instruments\/foundation\/jsondecoder\/datadecodingstrategy\/hexstring","title":"static let hexString: JSONDecoder.DataDecodingStrategy","type":"property"}],"path":"\/documentation\/instruments\/foundation\/jsondecoder\/datadecodingstrategy","title":"JSONDecoder.DataDecodingStrategy","type":"extension"}],"path":"\/documentation\/instruments\/foundation\/jsondecoder","title":"JSONDecoder","type":"extension"}],"path":"\/documentation\/instruments\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/array\/batch(by:)","title":"func batch(by: Int) -> [[Element]]","type":"method"}],"path":"\/documentation\/instruments\/swift\/array","title":"Array","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/int\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/swift\/int\/init(data:endianness:)","title":"init(data: Data, endianness: Endianness)","type":"init"}],"path":"\/documentation\/instruments\/swift\/int\/bytesconstructiblenumber-implementations","title":"BytesConstructibleNumber Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/swift\/int","title":"Int","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/int16\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/swift\/int16\/init(data:endianness:)","title":"init(data: Data, endianness: Endianness)","type":"init"}],"path":"\/documentation\/instruments\/swift\/int16\/bytesconstructiblenumber-implementations","title":"BytesConstructibleNumber Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/swift\/int16","title":"Int16","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/int32\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/swift\/int32\/init(data:endianness:)","title":"init(data: Data, endianness: Endianness)","type":"init"}],"path":"\/documentation\/instruments\/swift\/int32\/bytesconstructiblenumber-implementations","title":"BytesConstructibleNumber Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/swift\/int32","title":"Int32","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/int64\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/swift\/int64\/init(data:endianness:)","title":"init(data: Data, endianness: Endianness)","type":"init"}],"path":"\/documentation\/instruments\/swift\/int64\/bytesconstructiblenumber-implementations","title":"BytesConstructibleNumber Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/swift\/int64","title":"Int64","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/int8\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/swift\/int8\/init(data:endianness:)","title":"init(data: Data, endianness: Endianness)","type":"init"}],"path":"\/documentation\/instruments\/swift\/int8\/bytesconstructiblenumber-implementations","title":"BytesConstructibleNumber Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/swift\/int8","title":"Int8","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/string\/base64decoded(options:)","title":"func base64Decoded(options: Data.Base64DecodingOptions) -> String?","type":"method"},{"path":"\/documentation\/instruments\/swift\/string\/base64encoded(options:)","title":"func base64Encoded(options: Data.Base64EncodingOptions) -> String?","type":"method"},{"path":"\/documentation\/instruments\/swift\/string\/removecharacters(in:)","title":"func removeCharacters(in: CharacterSet)","type":"method"},{"path":"\/documentation\/instruments\/swift\/string\/removeprefix(_:)","title":"func removePrefix(String)","type":"method"},{"path":"\/documentation\/instruments\/swift\/string\/removingcharacters(in:)","title":"func removingCharacters(in: CharacterSet) -> String","type":"method"},{"path":"\/documentation\/instruments\/swift\/string\/removingprefix(_:)","title":"func removingPrefix(String) -> String","type":"method"}],"path":"\/documentation\/instruments\/swift\/string","title":"String","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/uint\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/swift\/uint\/init(data:endianness:)","title":"init(data: Data, endianness: Endianness)","type":"init"}],"path":"\/documentation\/instruments\/swift\/uint\/bytesconstructiblenumber-implementations","title":"BytesConstructibleNumber Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/swift\/uint","title":"UInt","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/uint16\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/swift\/uint16\/init(data:endianness:)","title":"init(data: Data, endianness: Endianness)","type":"init"}],"path":"\/documentation\/instruments\/swift\/uint16\/bytesconstructiblenumber-implementations","title":"BytesConstructibleNumber Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/swift\/uint16","title":"UInt16","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/uint32\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/swift\/uint32\/init(data:endianness:)","title":"init(data: Data, endianness: Endianness)","type":"init"}],"path":"\/documentation\/instruments\/swift\/uint32\/bytesconstructiblenumber-implementations","title":"BytesConstructibleNumber Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/swift\/uint32","title":"UInt32","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/uint64\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/swift\/uint64\/init(data:endianness:)","title":"init(data: Data, endianness: Endianness)","type":"init"}],"path":"\/documentation\/instruments\/swift\/uint64\/bytesconstructiblenumber-implementations","title":"BytesConstructibleNumber Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/swift\/uint64","title":"UInt64","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/instruments\/swift\/uint8\/init(bytes:endianness:)","title":"init(bytes: [UInt8], endianness: Endianness)","type":"init"},{"path":"\/documentation\/instruments\/swift\/uint8\/init(data:endianness:)","title":"init(data: Data, endianness: Endianness)","type":"init"}],"path":"\/documentation\/instruments\/swift\/uint8\/bytesconstructiblenumber-implementations","title":"BytesConstructibleNumber Implementations","type":"symbol"}],"path":"\/documentation\/instruments\/swift\/uint8","title":"UInt8","type":"extension"}],"path":"\/documentation\/instruments\/swift","title":"Swift","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/instruments\/_concurrency\/task\/retrying(retriescount:retrydelay:priority:operation:)","title":"static func retrying(retriesCount: Int, retryDelay: TimeInterval?, priority: TaskPriority?, operation: () async throws -> Success) -> Task","type":"method"}],"path":"\/documentation\/instruments\/_concurrency\/task","title":"Task","type":"extension"}],"path":"\/documentation\/instruments\/_concurrency","title":"_Concurrency","type":"extension"}],"path":"\/documentation\/instruments","title":"Instruments","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}