//
//  SecureRandom.swift
//
//  Copyright Â© 2022 Aleksei Zaikin.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

import Foundation

/// An error that can be thrown by `SecureRandom` if something goes wrong.
public enum SecureRandomError: Error {
   /// An error thrown if bytes or number can't be generated.
   case cannotGenerate
}

/// An object that provides you functionality to generate bytes or numbers in a secure way.
public final class SecureRandom {
   // MARK: - Init

   /// Creates and returns a new instance of `SecureRandom`.
   public init() { }

   // MARK: - Generation

   /// Generates and returns random bytes.
   ///
   /// - Parameter count: Number of bytes to generate. Defaults to 32.
   /// - Returns: Securely generated bytes.
   public func nextBytes(count: Int = 32) throws -> [UInt8] {
      var bytes = [UInt8](repeating: 0, count: count)
      let status = SecRandomCopyBytes(kSecRandomDefault, count, &bytes)
      if status == errSecSuccess {
         return bytes
      } else {
         throw SecureRandomError.cannotGenerate
      }
   }

   /// Generates and returns a random bytes wrapped to `Data`.
   ///
   /// - Parameter count: Number of bytes to generate. Defaults to 32.
   /// - Returns: Securely generated bytes wrapped to `Data`.
   public func nextData(count: Int = 32) throws -> Data {
      let bytes = try nextBytes(count: count)
      return Data(bytes: bytes, count: count)
   }

   /// Generates and returns a random integer number.
   ///
   /// - Returns: Securely generated random integer number.
   public func nextInt() throws -> Int {
      let count = MemoryLayout<Int>.size
      let bytes = try nextBytes(count: count)
      return bytes.withUnsafeBytes { pointer in
         pointer.load(as: Int.self)
      }
   }
}
